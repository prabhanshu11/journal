Lets design the output photo... It should have:
    Distraction list
    Today's TODO
    Quote
    Graph about meditation, exercise, sleep and food.
        Meditation: {x: day, y: min_meditated}
        Exercise: Use a bar graph in which the bar is multicolored. Each colour                    representing areas  Legs, Back, Chest,...
        Sleep: Colour code the bars which are utilized for sleeping(optional: meditating, exercise,... if it does not look too much congested)

TEXTURE
Also, make the line ending round.

I want to make a class which filters the attributes based on their types.
Puts them into respective lists 
Then change their repr (or type); input and output.
So that the code is more readable while viewing yaml file.
The subclass would have two _______. One for taking in and other for giving out


--Making a task list / Reading the database--------------
task_list = --list of tasks--
There will a function or class which looks on today's entry.
And sees if there is any scheduled task from previous dates, creates a task list from previous day's distraction list. 
#Case 1: same day evening task (default = today)
The method, goes to the morning of same date and
    1. Set line of date = 3
 
class Database(object):
    tasks = []

class Database(object):
    tasks = []
    2. x is no of characters from margin, y is line no 
    3. find and save the date_line_no of next date = 40
    4. our playground is now [0, 37] lines
    5. for 0 <= x <= 4 and 0 <= y <= 37 search for 'Tasks'
    6. Repeat 1 for line at 'Tasks'
    7. Repeat 3 = 40
    8. Repeat 4 [0,17]
    9. Repeat 5 - 0<=x<=1, 0<=y<=17 make a dict of line_number:task_number
    10. for each line_number in 0,17,
        day.completed : [3,0 - 7,0]    <---- position in rel. x,y
        task_string : [13,0 - EOL]
        day.day : [8,1]
        estd_time : . . .
        


--Writing on the database------------
# Case 1.1 First time task, only morning input taken.
    In this case, I only have estd_time and notes.
    But how to verify that this is the case ?
# Case 1.2
    First time taks, evening input also taken.
# Case 2 Task not completed and scheduled for a particular date.
When scheduling for the next date, write
    Task string, previous date, 
    
    
DB management should be a part of Task or not ?

ok. what is the problmen I am facing ?
I want to combine, essentials, mj and a list(Tasks) into one package and store it in the db by date.
I have made a Day class. How and when will it be populated ?
It should be populated right after the questions are asked.
Day object should have details of a tasks on that particular day only. 
This should be handled by Day or Task ?

Day class should:
call essentials, mj and tasks. 
    Structure of Day class:

File[string(datetime.date)] -----> Day object.  --  Task class
  |                                            ||    |
Referenced by                                  ||  Referenced by
date strings                                   ||   Task strings     Eg: "B1"
  |             +----Essentials                ||    |
  |             |----5 minute journal  |-"B1"  ||    +      +--->Day = 1
  +-->today-1---|----Task('A1')        |       ||    |------|--->Estd_time = 1h
  |             |----Task('B1')+-------|       ||    |      |--->Effort_Satis = 7/10
  |             +----Task('C1')        |-Day=1 ||    |        .         .
  |                                            ||    |        .         .
  |             +----Essentials                ||    |      +--->Next_date = today()
  |             |----5 minute journal  |-"B1"  ||    |
  +-->today-----|----Task('B1')+-------|       ||    |      +--->Day = 2
  |             |----Task('A2')        |-Day=2 ||    |------|--->Next_date = today()+1
  |             +----Task('B2')                ||    |      +--->Prev_date = today()
  |                                            ||    |
  |             |----                          ||    |      +--->Day = 3
  |             |----                  |-"B1"  ||    |------|--->Next_date = [scheduled]
  +-->today+1---|----Task('B1')+-------|       ||    |      ++-->Prev_date = today()
  |             |----                  |-Day=3 ||    |
  |             |----                          ||    |
  |                                            ||    |
  |                                            ||    +

    
Lets start. 
Today starts. There is no previous tasks or anything. Hence there is no entry.
KeyError is catched in the except clause. 

The function should ask the essentials and the morning 5mj questions.

Lets split essentials function into a class with two functions.
    One will be asked in the morning --> Sleep, Food; there will be an option for ex & md.
    Others in the evening --> Food(rest of it), ex, md.

Next comes the morning 5MJ questions. Which are:
        I am grateful for; What would make today great; Daily affirmations "I am ..."

Next, a list of distractions are to be shown.
    A distraction journal class should be created first. 
        It should be separate database.
        Save the date and time when a distraction was written.
        Option to convert distractions into reminders.
            When should the reminder be shown ? Ans: During the distraction mode, at the right side, when the date is approaching. 
        Option to save important dates. (Create a separate note on evernote for this)
    
    What would be the structure of the database. 
    
    What should the distraction class look like if, its just an array of arrays which are pickled.
    It should return a list of strings. with options of included date and hidden dists.
    It should be able to take strings and append it with a timestamp in the pickle.
                            OR
    The class has attributes. And then that class is shelved. But shelving means a single instance is to be saved. That's OK. But retrieving can be of the entire shelve using a for loop. So,
    It could return a list of strings. with options of included date and hidden dists.

Now a list of distractions is shown. 
User is now to be asked if any of those are to be converted into tasks.

Before that, lets make sure that the previous code is working well, also reorganise everything and delete unneccessary stuff.

Task class seems fine, lets check out Day class. They all work.
Now lets check distractions.It works too. But I'm not very sure about the timestamp part. The difference is just in nanoseconds. Using the pickle approach.
    What methods do I have ?
    Distraction.save('str1') --> This adds a new dict entry with str1 as key and its timestamp as value. It then saves that dict persistently.
    Distraction.view() --> This displays all the strings in the pillow as dicts. The keys can later be extracted using Distraction.view().keys()
    
    Distraction strings are stored as keys in a dict to ensure there are no duplicate entries using dict.setdefault() function.
    

Now lets resume the app working from line 113. Following classes are ready:
Tasks, Day, Distraction, 5MJ, Essentials. 

Ok now, its time for the user to compile a tasks list. Obviously this feature can be used anytime, but this is the morning. So he is already shown his distractions list and today's 5mj 3things. 
STEPS: First line is business logic, second line is program logic.

 |--Ask for the task string, estd_time and strt_date.
 |----->Strt_date will not be the part of Task, it will be stored in Day class. For that, 
        Make a task instance with string, estd and notes.
        Ask the user for strt_date which is date.date() and store it in  a variable.
        If the date is today's date, add it to 'today' instance of 'Day' and increment counter.
        Elif, if it a different date, try to open its persistant entry. If its found, append.
            else, create a new entry and then append it to .tasks.
        
        This trying to open a persistant entry and then if its not found creating and then adding the entry
        keeps happening. This feature should be a part of .fromDB in 'Day' class.

 |--Keep asking these and creating tasks but remind the user if 3 tasks are set for today.
 |------>In a loop, asks and add tasks to a 'today' instance of 'Day' class. Remind when counter is at 
         three.
 
 |--Run the program in distraction mode.
 |------>In a loop, user can write anything. When he presses enter, a distraction entry is made and saved.
        Display that entry on a list.
        Except if there are some specific keywords. One of those keywords being 'sign off for the night'
        In which case, start the evening mode.

 |--Start the Evening mode.
 |----->This mode will take inputs for evening questions of mj and essentials.
        Also ask questions about the tasks assigned in the morning.
            Case['Easiest'] - Task was a one-time-thing and the user has completed it.
            Case['Easy'] - Task was created today but the user has not completed it so he schedules it.
            Case['Hard'] - Task is a part of a previous entry, so the user has to be displayed the full
                chained task and then it's Case['Easy']
                
 |--Case['Hard'] of previous step requires changes in Task module. 
 |----->__str__ to be completely changed so that it displays that full chain.
        The .prev_date is to be checked if its None then this is the first day of that task.
        If .next_date is None this is the latest day of that task.
            
            This begs a question, the default value of .next_date was date.today() + timedelta(day+1) so 
            that if user skips the evening session, the task is added to the entry of tomorrow. What if the user does not open the app even the next day i.e morning session is not opened.
            
            I have now changed it to None. This way, it is easier to check if the current task is the infact the latest one.



        
[notDone]Lets create a test function which can automatically enter the texts and check the results. 
    https://code-maven.com/mocking-input-and-output-for-python-testing

What do I have to mock ? text input to the morning() function.
lets check multi_input() first.
Normal behaviour of multi_input()
    It returns a generator, user has to input and then press enter. It breaks when Enter is pressed twice. 
What do I want to test.
    There should be an external file, with CR seperated values, when there are 2 CRs, multi_input should break. 
    OR,
    There should be a list of values.



































Write this for distrations: 
This is not only about writing distractions what come to your mind, 
it's this: don't keep anything what comes to your mind. That is going to 
feel unnatural, awkward and unneccessary. Writing distractions is just the first step in decluttering your mind.
But following the principles behind the GTD by David Allen, Every single next action you need to take about any of your commitements like your body, relationships, work, philosophy etc that you are involved in,
you need to clarify those and park those in appropriate places. 
So that you see those actions on regular places.
But you can't think all of it at once, our minds don't work like that. We do however get epiphanies. You might think they are random and to a certain point they are, and the system described below and this distraction section can help us to store them but you can manipulate your sub-concious, if you write the things which matter to you on certain places so that you can easily revisit them later. Yes, I'm talking about goals or other stuff which you need daily, weekly, monthly and so on. But all that activity seems too much hard work and there is a tendency to never start or quit early. More on this later.

Distraction journal acts as paper on which you print the second impressions of your thoughts. Where do you put the first impressions ? Well you could put it here, if you happen to be sitting infront of this app. Otherwise make a system for yourself, I use evernote widget to write instant notes or save audio msgs. I can later add it to this list or I can add to any of my evernote notes. 
The point is, you need to take impressions of your thoughts so that they are clarified. I have purposefully not added any timers, word limits or other distractions. Just write whatever you want, store it on the journal which you get to see all the time the app is open, then if you find place for it or decide to take action, you can delete that entry. 

Apart from making it easy to take down your mind's impressions and helping you to keep yourself from distracting when you are on your computer trying to work and not watch youtube. The distraction journal also acts a positive feedback loop. 
You see the most loud and immediate impressions of your mind, which do tend to always set you on a path of procrasination in the begining, all the time when your PC is ON on your wallpaper and on this app, so they have a greater chance of influencing your subconcious. Then when you get that next epiphany, you can jot it down right here. You could modify and build on the any previous thought of idea. This is a very powerfull feature, so even if you stop using this app, filling nothing for the questions and assigning no tasks, you still get a screen, but not a blank one and sometimes that's enough.



























    
    
    
