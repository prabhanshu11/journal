# AUTOGENERATED! DO NOT EDIT! File to edit: 01_Tasks.ipynb (unless otherwise specified).

__all__ = ['properties', 'defaults', 'Task', 'str2timeDelta', 'args_map', 'task_scheduler', 'estimated_time',
           'actual_time', 'satisfaction']

# Cell
from collections import namedtuple
from datetime import datetime, date, time, timedelta
import re
properties = ['task',
              'Estd_Time',
              'Strt_Date',
              'Time_Takn',
              'Comp_Date',
              'Satsfactn',
              'completed']
defaults = ['?']*(len(properties)-1)
defaults[-1] = 0 #default for 'completed' is to be 0
Task = namedtuple('Task', properties, defaults=defaults)

# Cell
args_map = {'d':'days',
             'h':'hours',
             'w':'weeks',
             'm':'minutes'}

def str2timeDelta(string):

    pattern = re.compile(r"""
    (\d+\.*\d*) #Any real numbers >> Digit decimal digit(optional)
    \s? #To handle space
    ([hmsdw][o]?)  # any of h, m... o is to diff b/w m[in] and m[onth]
    """, re.VERBOSE)                         #remember to add functionality for month later
    args_as_tuples_in_list = re.findall(pattern, string)
    args = {args_map.get(arg_tuple[1]) : float(arg_tuple[0])
                for arg_tuple in args_as_tuples_in_list}
    return timedelta(**args)

# Cell
def task_scheduler(s: 'string of task'):
    """
    Asks the user the date on which selected string is to be added to the "today's task list"
    then creates and returns a Task object with Strt_Date field as that date.
    """
    print(s)
    scheduled_task = Task(s)
    print(f"When should be this on your task list. \n")
    print(f"Enter 'y' to add it on today's list. Today is {date.today()}")
    print(f"You can enter the date in the format of today's date printed above.")
    print(f'Or you can answer in relative terms. Eg: 10w, 5d (only weeks and days supported)')
    date_string = input()
    pattern_for_isodate = re.compile(r'\d{4}-\d{2}-\d{2}')

    if 'y' in date_string:
        scheduled_task = scheduled_task._replace(
            Strt_Date = date.today())

    elif re.match(pattern_for_isodate, date_string):
        scheduled_task = scheduled_task._replace(
            Strt_Date = date.fromisoformat(date_string))

    else:
        scheduled_task = scheduled_task._replace(
            Strt_Date = date.today() + str2timeDelta(date_string))

    return scheduled_task

# Cell
def estimated_time(task_tuple):
    print(f'How much time do you think this would take ?')
    t = input("Eg: '45m', '1h'")
    task_tuple = task_tuple._replace( Estd_Time = str2timeDelta(t) )
    return task_tuple

def actual_time(task_tuple):
    print(f'You thought you would take {task_tuple.Estd_Time}. How much time did you actually take ?')
    t = input("Eg: '45m', '1h'")
    task_tuple = task_tuple._replace( Time_Takn = str2timeDelta(t) )
    return task_tuple

def satisfaction(task_tuple):
    print("On a scale of 1-10, how much satisfied do you about the effort you put into this task ?")
    s = float(input())
    task_tuple = task_tuple._replace( Satsfactn = s)
    if task_tuple.completed == 1:
        task_tuple = task_tuple._replace( CompDate = date.today() )
    return task_tuple
