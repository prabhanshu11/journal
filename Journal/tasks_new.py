# AUTOGENERATED! DO NOT EDIT! File to edit: 11_Tasks.ipynb (unless otherwise specified).

__all__ = ['str2timeDelta', 'time_abbreviation', 'task_scheduler', 'estimated_time', 'actual_time', 'satisfaction',
           'sensible_date2str', 'sensible_str2date']

# Cell
#from Journal.tasks import *
from .questions import *
from datetime import datetime, date, time, timedelta
import re, math, json
from typing import *
from dataclasses import dataclass, field
# from yaml import load, dump
# try:
#     from yaml import CLoader as Loader, CDumper as Dumper
# except ImportError:
#     from yaml import Loader, Dumper

# Cell
time_abbreviation = {'d':'days',
             'h':'hours',
             'w':'weeks',
             'm':'minutes'}

def str2timeDelta(string):

    pattern = re.compile(r"""
    (\d+\.*\d*) #Any real numbers >> Digit decimal digit(optional)
    \s? #To handle space
    ([hmsdw][o]?)  # any of h, m... o is to diff b/w m[in] and m[onth]
    """, re.VERBOSE)                         #REMEMBER: To add functionality for month later.
    args_as_tuples_in_list = re.findall(pattern, string)
    kwargs = {time_abbreviation.get(arg_tuple[1]) : float(arg_tuple[0])
                                            for arg_tuple in args_as_tuples_in_list}
    return timedelta(**kwargs)

# Cell
def task_scheduler():
    print(f"When should be this on your task list. \n")
    print(f"Press enter to add it on today's list. Today is {date.today()}")
    print(f"You can enter the date in the format of today's date printed above.")
    print(f'Or you can answer in relative terms. Eg: 10w, 5d (only weeks and days supported)')
    date_string = input()
    pattern_for_isodate = re.compile(r'\d{4}-\d{2}-\d{2}')

    if '' in date_string:
        strt_Date = date.today()
    elif re.match(pattern_for_isodate, date_string):
        strt_Date = date.fromisoformat(date_string)
    else:
        strt_Date = date.today() + str2timeDelta(date_string)

    return strt_Date

# Cell
def estimated_time():
    print(f'How much time do you think this would take ?')
    t = input("Eg: '45m', '1h'")
    estd_Time = str2timeDelta(t)
    return estd_Time

def actual_time(task_tuple):
    print(f'You thought you would take {task_tuple.Estd_Time}. How much time did you actually take ?')
    t = input("Eg: '45m', '1h'")
    task_tuple = task_tuple._replace( Time_Takn = str2timeDelta(t) )
    return task_tuple

def satisfaction(task_tuple):
    print("On a scale of 1-10, how much satisfied do you about the effort you put into this task ?")
    s = float(input())
    task_tuple = task_tuple._replace( Satsfactn = s)
    if task_tuple.completed == 1:
        task_tuple = task_tuple._replace( CompDate = date.today() )
    return task_tuple


# Cell
def sensible_date2str(x: datetime.date) -> str:
    """
    Returns string of the form:
    '15-Dec-2012    [Saturday]'
    """
#     if x.strftime("%d")[0] == '1': return x.strftime("%A %-dth %B %Y")
#     elif x.strftime("%d")[-1] == '1': return x.strftime("%A %-dst %B %Y")
#     elif x.strftime("%d")[-1] == '2': return x.strftime("%A %-dnd %B %Y")
#     elif x.strftime("%d")[-1] == '3': return x.strftime("%A %-drd %B %Y")
#     else : return x.strftime("%A %-dth %B %Y")
    return x.strftime("%d-%b-%Y    [%A]")
def sensible_str2date(x: str, case=0) -> datetime.date:
    """
    Takes string of the form:
    '15-Dec-2012'
    """
    if case==0: x = datetime.strptime(x,'%d-%b-%Y')
    if case==1: x = datetime.strptime(x,'%d-%m-%Y')
    return x.date()